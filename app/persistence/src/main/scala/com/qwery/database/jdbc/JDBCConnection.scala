package com.qwery.database
package jdbc

import java.util.{Properties, UUID}
import java.sql.{SQLWarning, Array => SQLArray, _}
import java.util.concurrent.Executor

import com.qwery.database.server.ClientSideTableService

import scala.beans.{BeanProperty, BooleanBeanProperty}
import scala.collection.concurrent.TrieMap

/**
 * Qwery JDBC Connection
 * @param service  the [[ClientSideTableService]]
 * @param database the database name
 */
class JDBCConnection(val service: ClientSideTableService, val database: String, url: String) extends Connection with JDBCWrapper {
  private val clientInfoMap = TrieMap[String, String]()
  private val savePoints = TrieMap[String, Savepoint]()
  private var warnings: Option[SQLWarning] = None
  private var networkTimeout: Int = 0

  @BeanProperty var autoCommit: Boolean = true
  @BeanProperty var catalog: String = _
  @BeanProperty var clientInfo: Properties = _
  @BooleanBeanProperty var closed: Boolean = false
  @BeanProperty var holdability: Int = 0
  @BeanProperty val metaData = new JDBCDatabaseMetaData(this, url, database)
  @BooleanBeanProperty var readOnly: Boolean = false
  @BeanProperty var schema: String = _
  @BeanProperty var transactionIsolation: Int = 0
  @BeanProperty var typeMap: java.util.Map[String, Class[_]] = _

  override def createStatement(): Statement = new JDBCStatement(this)

  override def prepareStatement(sql: String): PreparedStatement = new JDBCPreparedStatement(this, sql)

  override def prepareCall(sql: String): CallableStatement = new JDBCCallableStatement(this, sql)

  override def nativeSQL(sql: String): String = sql

  override def commit(): Unit = ()

  override def rollback(): Unit = ()

  override def close(): Unit = closed = true

  override def getWarnings: SQLWarning = warnings.orNull

  override def clearWarnings(): Unit = warnings = None

  override def createStatement(resultSetType: Int, resultSetConcurrency: Int): Statement = {
    new JDBCStatement(this)
  }

  override def prepareStatement(sql: String, resultSetType: Int, resultSetConcurrency: Int): PreparedStatement = {
    new JDBCPreparedStatement(this, sql)
  }

  override def prepareCall(sql: String, resultSetType: Int, resultSetConcurrency: Int): CallableStatement = {
    new JDBCCallableStatement(this, sql)
  }

  override def setSavepoint(): Savepoint = setSavepoint(UUID.randomUUID().toString)

  override def setSavepoint(name: String): Savepoint = {
    val savepoint = JDBCSavepoint(name)
    savePoints(name) = savepoint
    savepoint
  }

  override def rollback(savepoint: Savepoint): Unit = ()

  override def releaseSavepoint(savepoint: Savepoint): Unit = savePoints.remove(savepoint.getSavepointName)

  override def createStatement(resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): Statement = {
    new JDBCStatement(this)
  }

  override def prepareStatement(sql: String, resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): PreparedStatement = {
    new JDBCPreparedStatement(this, sql)
  }

  override def prepareCall(sql: String, resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): CallableStatement = {
    new JDBCCallableStatement(this, sql)
  }

  override def prepareStatement(sql: String, autoGeneratedKeys: Int): PreparedStatement = {
    new JDBCPreparedStatement(this, sql)
  }

  override def prepareStatement(sql: String, columnIndexes: Array[Int]): PreparedStatement = {
    new JDBCPreparedStatement(this, sql)
  }

  override def prepareStatement(sql: String, columnNames: Array[String]): PreparedStatement = {
    new JDBCPreparedStatement(this, sql)
  }

  override def createClob(): Clob = JDBCBlob.create()

  override def createBlob(): Blob = JDBCBlob.create()

  override def createNClob(): NClob = JDBCBlob.create()

  override def createSQLXML(): SQLXML = JDBCSQLXML.create()

  override def isValid(timeout: Int): Boolean = networkTimeout >= timeout

  override def setClientInfo(name: String, value: String): Unit = clientInfoMap(name) = value

  override def getClientInfo(name: String): String = clientInfoMap(name)

  override def createArrayOf(typeName: String, elements: Array[AnyRef]): SQLArray = JDBCArray(this, typeName, elements)

  override def createStruct(typeName: String, attributes: Array[AnyRef]): Struct = JDBCStruct(typeName, attributes)

  override def abort(executor: Executor): Unit = ()

  override def setNetworkTimeout(executor: Executor, milliseconds: Int): Unit = networkTimeout = milliseconds

  override def getNetworkTimeout: Int = networkTimeout

}
