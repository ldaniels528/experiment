package com.qwery.database
package jdbc

import java.sql.{ResultSet, SQLWarning, Statement}

import scala.beans.{BeanProperty, BooleanBeanProperty}
import scala.collection.mutable.ListBuffer

/**
 * Qwery Statement
 * @param connection the [[JDBCConnection connection]]
 */
class JDBCStatement(@BeanProperty val connection: JDBCConnection)
  extends Statement with JDBCWrapper {
  private val batches = ListBuffer[String]()
  private var _isCloseOnCompletion: Boolean = _

  @BooleanBeanProperty var closed: Boolean = false
  @BeanProperty var cursorName: String = _
  @BeanProperty var escapeProcessing: Boolean = _
  @BeanProperty var fetchDirection: Int = ResultSet.FETCH_FORWARD
  @BeanProperty var fetchSize: Int = 20
  @BeanProperty var maxFieldSize: Int = _
  @BeanProperty var maxRows: Int = _
  @BeanProperty var queryTimeout: Int = _
  @BeanProperty var resultSet: ResultSet = _
  @BeanProperty val resultSetConcurrency: Int = ResultSet.CONCUR_UPDATABLE
  @BeanProperty val resultSetHoldability: Int = ResultSet.HOLD_CURSORS_OVER_COMMIT
  @BeanProperty val resultSetType: Int = ResultSet.TYPE_SCROLL_SENSITIVE
  @BeanProperty var updateCount: Int = _
  @BooleanBeanProperty var poolable: Boolean = _

  override def cancel(): Unit = ()

  override def clearWarnings(): Unit = ()

  override def close(): Unit = closed = true

  override def addBatch(sql: String): Unit = batches += sql

  override def clearBatch(): Unit = batches.clear()

  override def executeBatch(): Array[Int] = {
    val outcome = (batches map executeUpdate).toArray
    batches.clear()
    outcome
  }

  override def execute(sql: String): Boolean = executeUpdate(sql) > 0

  override def execute(sql: String, autoGeneratedKeys: Int): Boolean = executeUpdate(sql, autoGeneratedKeys) > 0

  override def execute(sql: String, columnIndexes: Array[Int]): Boolean = executeUpdate(sql, columnIndexes) > 0

  override def execute(sql: String, columnNames: Array[String]): Boolean = executeUpdate(sql, columnNames) > 0

  override def executeQuery(sql: String): ResultSet = {
    val outcome = connection.client.executeQuery(connection.getCatalog, sql)
    resultSet = JDBCResultSet(connection, outcome)
    updateCount = outcome.count
    resultSet
  }

  override def executeUpdate(sql: String, autoGeneratedKeys: Int): Int = executeUpdate(sql)

  override def executeUpdate(sql: String, columnIndexes: Array[Int]): Int = executeUpdate(sql)

  override def executeUpdate(sql: String, columnNames: Array[String]): Int = executeUpdate(sql)

  override def executeUpdate(sql: String): Int = {
    val outcome = connection.client.executeQuery(connection.getCatalog, sql)
    resultSet = JDBCResultSet(connection, outcome)
    updateCount = outcome.count
    updateCount
  }

  override def getGeneratedKeys: ResultSet = resultSet

  override def getMoreResults: Boolean = false

  override def getMoreResults(current: Int): Boolean = false

  override def getWarnings: SQLWarning = new SQLWarning()

  override def closeOnCompletion(): Unit = _isCloseOnCompletion = true

  override def isCloseOnCompletion: Boolean = _isCloseOnCompletion

}
