--------------------------------------------------
--Stage Table
--------------------------------------------------
--LEAD_S
--------------------------------------------------
SELECT BLR.LEAD_ID
    ,BLR.IMPORT_FILE_ID
    ,BLR.RAW_DATA_IMPORT_ID
    ,BLR.FRANCHISE_ID
    ,BLR.LEAD_CONTACT_ZIP_CODE
    ,BLR.CONTACT_TIME
    ,BLR.CONTACT_METHOD_FLAG
    ,BLR.PURCHASE_TIMEFRAME_ID
    ,BLR.LEAD_CREATED_DATE
    ,BLR.CITY
    ,BLR.STATE
    ,BLR.ENTRY_ZIP_CODE
    ,BLR.LEAD_RESPONSE
    ,BLR.APP_SERVER_NAME
    ,BLR.PATH
    ,BLR.PAID_SEARCH_ID
    ,BLR.LEAD_TYPE_ID
    ,BLR.CREATED_DATE
    ,LAR.IS_DUPLICATE_FLAG
    ,LAR.OPT_IN_FLAG
    ,LAR.VEHICLE_STATUS
    ,LAR.COOKIE_ID
    ,LAR.TRANSACTION_TYPE_ID
    ,LAR.DEALER_ID
    ,LAR.ATC_SUBJECT
    ,LAR.KBB_SESSION_ID_INSTANCE
    ,LAR.VEHICLE_ID
    ,LAR.ATC_OWNER_ID
    ,LAR.ATC_CAR_ID
    ,LAR.TEST_LIST_NKEY
    ,LAR.PROGRAM_TYPE
FROM BYC_LEADS_RAW BLR
LEFT JOIN
(SELECT
LAR.LEAD_ID
,MAX(CASE WHEN LAR.LEAD_ATTRIBUTE_TYPE_ID=13 THEN CAST(LAR.LEAD_ATTRIBUTE_VALUE AS CHAR(1)) ELSE NULL END) AS IS_DUPLICATE_FLAG
,MAX(CASE WHEN LAR.LEAD_ATTRIBUTE_TYPE_ID=17 THEN (CASE WHEN lower(LAR.LEAD_ATTRIBUTE_VALUE)='on' THEN '1' ELSE LAR.LEAD_ATTRIBUTE_VALUE END) ELSE NULL END)  AS OPT_IN_FLAG
,MAX(CASE WHEN LAR.LEAD_ATTRIBUTE_TYPE_ID=23 THEN CAST(LAR.LEAD_ATTRIBUTE_VALUE AS VARCHAR(500)) ELSE NULL END) AS VEHICLE_STATUS
,MAX(CASE WHEN LAR.LEAD_ATTRIBUTE_TYPE_ID=44 THEN CAST(LAR.LEAD_ATTRIBUTE_VALUE AS VARCHAR(500)) ELSE NULL END) AS COOKIE_ID
,MAX(CASE WHEN LAR.LEAD_ATTRIBUTE_TYPE_ID=42 THEN CAST(LAR.LEAD_ATTRIBUTE_VALUE AS VARCHAR(500)) ELSE NULL END) AS TRANSACTION_TYPE_ID
,MAX(CASE WHEN LAR.LEAD_ATTRIBUTE_TYPE_ID=45 THEN CAST(LAR.LEAD_ATTRIBUTE_VALUE AS VARCHAR(500)) ELSE NULL END) AS DEALER_ID
,MAX(CASE WHEN LAR.LEAD_ATTRIBUTE_TYPE_ID=52 THEN CAST(LAR.LEAD_ATTRIBUTE_VALUE AS VARCHAR(500))ELSE NULL END) AS ATC_SUBJECT
,MAX(CASE WHEN LAR.LEAD_ATTRIBUTE_TYPE_ID=50 THEN CAST(LAR.LEAD_ATTRIBUTE_VALUE AS VARCHAR(500))ELSE NULL END) AS KBB_SESSION_ID_INSTANCE
,MAX(CASE WHEN LAR.LEAD_ATTRIBUTE_TYPE_ID=47 THEN CAST(LAR.LEAD_ATTRIBUTE_VALUE AS VARCHAR(500))ELSE NULL END) AS VEHICLE_ID
,MAX(CASE WHEN LAR.LEAD_ATTRIBUTE_TYPE_ID=53 THEN CAST(LAR.LEAD_ATTRIBUTE_VALUE AS VARCHAR(500))ELSE NULL END) AS ATC_OWNER_ID
,MAX(CASE WHEN LAR.LEAD_ATTRIBUTE_TYPE_ID=54 THEN CAST(LAR.LEAD_ATTRIBUTE_VALUE AS VARCHAR(500))ELSE NULL END) AS ATC_CAR_ID
,MAX(CASE WHEN LAR.LEAD_ATTRIBUTE_TYPE_ID=67 THEN CAST(EDW_UTILITY_1_4..REPLACE(LEAD_ATTRIBUTE_VALUE,'^','|') AS VARCHAR(500))ELSE NULL END) AS TEST_LIST_NKEY
,MAX(CASE WHEN LAR.LEAD_ATTRIBUTE_TYPE_ID=68 THEN CAST(LAR.LEAD_ATTRIBUTE_VALUE AS VARCHAR(500))ELSE NULL END) AS PROGRAM_TYPE
FROM BYC_LEAD_ATTRIBUTES_RAW LAR
WHERE LAR.LEAD_ATTRIBUTE_TYPE_ID in (13, 17, 23, 42, 44, 45, 47, 50, 52, 53, 54, 67, 68)
GROUP BY LEAD_ID
) LAR ON BLR.LEAD_ID=LAR.LEAD_ID
;
--Additions needed Expression 1
--DECODE(IS_DUPLICATE_FLAG,'0', 'N','1','Y',IS_DUPLICATE_FLAG)
--DECODE(OPT_IN_FLAG,'0', 'N','1','Y',OPT_IN_FLAG)
--iif(instr(KBB_SESSION_ID_INSTANCE, '_') > 0, SUBSTR(KBB_SESSION_ID_INSTANCE, 1, instr(KBB_SESSION_ID_INSTANCE, '_')-1), KBB_SESSION_ID_INSTANCE)
--iif(instr(KBB_SESSION_ID_INSTANCE, '_') > 0, SUBSTR(KBB_SESSION_ID_INSTANCE, instr(KBB_SESSION_ID_INSTANCE, '_')+1), '0')
--DECODE(TRUE, isnull(CONTACT_METHOD_FLAG), ' ', CONTACT_METHOD_FLAG = 0, 'N', 'Y')
--decode(TRUE, upper(substr(LEAD_RESPONSE, 1, 2)) = 'OK', 'Ok', upper(substr(LEAD_RESPONSE, 1, 4)) = 'TRUE', 'True', instr(upper(LEAD_RESPONSE), 'DUPLICATE'), 'Duplicate',' ')
--Additions needed Expression 2
--IIF(PAGE_INSTANCE='' OR PAGE_INSTANCE=' ','0',PAGE_INSTANCE)
--IIF(ISNULL(:LKP.UNLKP_VEHICLE_ID(in_VEHICLE_ID)), 0, in_VEHICLE_ID)
--LEAD_GROUP_S
--------------------------------------------------
SELECT LGR.IMPORT_FILE_ID
    ,LGR.RAW_DATA_IMPORT_ID
    ,LGR.LEAD_ID
    ,EDW_UTILITY_1_4..REGEXP_REPLACE(LGR.GROUP_ID, '{|}|CHR(39)', '')
    ,LGR.CREATED_DATE
FROM $$RAW_DATA_IMPORT..BYC_LEAD_GROUP_RAW LGR
INNER JOIN $$RAW_DATA_IMPORT..BYC_LEADS_RAW LR ON LGR.LEAD_ID = LR.LEAD_ID
--------------------------------------------------
--Dimension Table
--------------------------------------------------
--FRANCHISE_D
--------------------------------------------------
SELECT  F.FRANCHISE_ID ,F.FRANCHISE_NAME,F.PROFILE_ID,F.MAKE_ID,F.FRANCHISE_CITY,F.FRANCHISE_STATE,F.FRANCHISE_ZIP_CODE,F.DEALERSHIP_URL
        ,F.INVENTORY_URL,F.USE_MAPQUEST_FLAG,F.LOGO_NAME,F.FRANCHISE_LEAD_FORMAT_ID,F.PARTNER_FRANCHISE_ID,F.FRANCHISE_ACTIVE_FLAG
        ,F.FRANCHISE_CREATED_DATE,F.FRANCHISE_MODIFIED_DATE,F.USE_PROFILE_EMAIL_FOR_LEAD_FLAG,F.KBB_KEY_ID
        ,F.CONTRACT_TERMINATION_FLAG,F.CREATED_DATE
        ,CASE WHEN SHOWCASE.FRANCHISE_ID IS NOT NULL THEN 'Y' ELSE 'N' END as FRANCHISE_SHOWCASE_FLAG
        ,M.MAKE_NAME AS FRANCHISE_MAKE
        ,llc.LATITUDE
        ,llc.LONGITUDE

FROM    BYC_FRANCHISES_RAW F
        LEFT JOIN BYC_MAKE_RAW M ON F.MAKE_ID=M.MAKE_ID
        LEFT OUTER JOIN
            (   SELECT  F.FRANCHISE_ID,F.FRANCHISE_ACTIVE_FLAG,P.COMPANY_ACTIVE_FLAG,P.PROFILE_TYPE_ID,DDF.VERSION_NUMBER
                FROM    BYC_FRANCHISES_RAW F
                        INNER JOIN BYC_DEALER_DIRECT_FRANCHISE_RAW DDF  ON F.FRANCHISE_ID=DDF.FRANCHISE_ID
                        INNER JOIN BYC_PROFILES_RAW P ON F.PROFILE_ID=P.PROFILE_ID
                WHERE   F.IMPORT_FILE_ID IN (SELECT DISTINCT PROPERTY_VAL FROM  ETL_CONFIG_TBL  WHERE PROCESS_CONTROL_NAME = '$$Source')
                AND     DDF.IMPORT_FILE_ID IN (SELECT DISTINCT PROPERTY_VAL FROM ETL_CONFIG_TBL WHERE PROCESS_CONTROL_NAME = '$$Source')
                AND     P.IMPORT_FILE_ID IN (SELECT DISTINCT PROPERTY_VAL FROM ETL_CONFIG_TBL   WHERE PROCESS_CONTROL_NAME = '$$Source')
                AND     F.FRANCHISE_ACTIVE_FLAG=1
                AND     P.COMPANY_ACTIVE_FLAG=1
                AND     P.PROFILE_TYPE_ID=6
                AND     DDF.VERSION_NUMBER=0
                AND     CURRENT_DATE BETWEEN DDF.EFFECTIVE_START_DATE AND DDF.EFFECTIVE_END_DATE
            ) SHOWCASE ON F.FRANCHISE_ID=SHOWCASE.FRANCHISE_ID
        LEFT JOIN ADMIN.BYC_GEOCODE_LOOKUP_RAW llc ON (llc.FRANCHISE_ID = f.FRANCHISE_ID AND llc.IMPORT_FILE_ID = f.IMPORT_FILE_ID)
WHERE   F.IMPORT_FILE_ID IN (SELECT DISTINCT PROPERTY_VAL FROM ETL_CONFIG_TBL   WHERE PROCESS_CONTROL_NAME = '$$Source')
AND     M.IMPORT_FILE_ID IN (SELECT DISTINCT PROPERTY_VAL FROM ETL_CONFIG_TBL   WHERE PROCESS_CONTROL_NAME = '$$Source')
ORDER BY F.FRANCHISE_ID
;
--Additions needed
--Union with Target to compare for changes
--Lookup Profile_D using Franchise_Profile_Id to get Profile_Id (Inner Join)
--Insert Flag = IIF(ISNULL(TGT_FRANCHISE_ID) AND NOT ISNULL(SRC_FRANCHISE_ID), 'Y', 'N')
--Update Flag = IIF(V_INSERT_FLAG = 'N', IIF ((NOT ISNULL(SRC_FRANCHISE_ID) AND SRC_FRANCHISE_ID = TGT_FRANCHISE_ID  AND IN_OUT_SRC_FRANCHISE_MODIFIED_DATE > TGT_UPDATED_DATE) OR (NOT ISNULL(SRC_FRANCHISE_ID) AND SRC_FRANCHISE_ID = TGT_FRANCHISE_ID AND SRC_DEALER_SHOWCASE_FLAG<>TGT_FRANCHISE_SHOWCASE_FLAG) OR (TGT_LATITUDE <> SRC_LATITUDE) OR (TGT_LONGITUDE <> SRC_LONGITUDE) , 'Y', 'N'), 'N')
--Example Defaulting
--IIF(ISNULL (SRC_FRANCHISE_ID), -1, SRC_FRANCHISE_ID)
--IIF(ISNULL(SRC_FRANCHISE_NAME), ' ', SRC_FRANCHISE_NAME)
--IIF(ISNULL (SRC_LKP_PROFILE_ID), -1, SRC_LKP_PROFILE_ID)
--IIF(ISNULL (SRC_MAKE_ID), 0, SRC_MAKE_ID)
--IIF(ISNULL (SRC_FRANCHISE_CITY), ' ', SRC_FRANCHISE_CITY)
--IIF(ISNULL (SRC_FRANCHISE_STATE), ' ', SRC_FRANCHISE_STATE)
--IIF(ISNULL (SRC_FRANCHISE_ZIP_CODE), '00000', SRC_FRANCHISE_ZIP_CODE)
--IIF(ISNULL (SRC_FRANCHISE_LEAD_FORMAT_ID), 0, SRC_FRANCHISE_LEAD_FORMAT_ID)
--LEAD_FORMAT_DESC = DECODE(SRC_FRANCHISE_LEAD_FORMAT_ID, 1, 'XML', 2,'TEXT', 3, 'BOTH', ' ')
--IIF(ISNULL (SRC_PARTNER_FRANCHISE_ID), ' ', SRC_PARTNER_FRANCHISE_ID)
--IIF(ISNULL (SRC_FRANCHISE_ACTIVE_FLAG), ' ', SRC_FRANCHISE_ACTIVE_FLAG)
--IIF(ISNULL (SRC_KBB_KEY_ID), 0, SRC_KBB_KEY_ID)
--IIF(ISNULL (SRC_CONTRACT_TERMINATION_FLAG), -1, SRC_CONTRACT_TERMINATION_FLAG)
--Update Strategy = IIF(V_INSERT_FLAG = 'Y', DD_INSERT,IIF(V_UPDATE_FLAG='Y',  DD_UPDATE, DD_REJECT))
--Lead_Type_D
--------------------------------------------------
SELECT BYC_LEAD_TYPES_RAW.LEAD_TYPE_ID, BYC_LEAD_TYPES_RAW.LEAD_TYPE_DESC
FROM
 BYC_LEAD_TYPES_RAW
--Additions needed
--Union with target to compare for changes
--Ins_Upd_flag = DECODE(TRUE, ISNULL(LKP_LEAD_TYPE_SKEY), 'I', SRC_LEAD_TYPE_ID || ' | ' || SRC_LEAD_TYPE_DESC != LKP_LEAD_TYPE_ID || ' | ' || LKP_LEAD_TYPE_DESC, 'U')
--IIF(INS_UPD_FLG='I' OR INS_UPD_FLG='U', SRC_LEAD_TYPE_ID, LKP_LEAD_TYPE_ID)
--IIF(INS_UPD_FLG='I' OR INS_UPD_FLG='U',SRC_LEAD_TYPE_DESC, LKP_LEAD_TYPE_DESC)
--PURCHASE_TIMEFRAME_D
--------------------------------------------------
SELECT BYC_PURCHASE_TIMEFRAMES_RAW.PURCHASE_TIMEFRAME_ID, BYC_PURCHASE_TIMEFRAMES_RAW.IMPORT_FILE_ID, BYC_PURCHASE_TIMEFRAMES_RAW.RAW_DATA_IMPORT_ID, BYC_PURCHASE_TIMEFRAMES_RAW.PURCHASE_TIMEFRAME_DESC, BYC_PURCHASE_TIMEFRAMES_RAW.CREATED_DATE
FROM
 BYC_PURCHASE_TIMEFRAMES_RAW
--Additions needed
--Union with target to compare for changes
--Insert Flag = IIF(ISNULL(PURCHASE_TIMEFRAME_ID1) AND NOT ISNULL(PURCHASE_TIMEFRAME_ID), 'Y', 'N')
--Update Flag = IIF(PURCHASE_TIMEFRAME_ID=PURCHASE_TIMEFRAME_ID1,IIF(PURCHASE_TIMEFRAME_DESC=PURCHASE_TIMEFRAME_DESC1,'N','Y'),'N')
--Update Strategy = IIF(vRECORD_INSERT_FLAG = 'Y', DD_INSERT,IIF(vRECORD_UPDATE_FLAG='Y',  DD_UPDATE, DD_REJECT))
--LU_TEST_LIST
--------------------------------------------------
--Omniture Data
--GEOGRAPHY_D
--------------------------------------------------
--Geography Dimension
--PAID_SEARCH_D
--------------------------------------------------
--Omniture & Mktg Dimension
--------------------------------------------------
--Fact Table
--------------------------------------------------
--LEAD_F
--------------------------------------------------
SELECT
    LEAD_S.IMPORT_FILE_ID,
    LEAD_S.RAW_DATA_IMPORT_ID,
    LEAD_S.LEAD_ID,
    FRANCHISE_D.FRANCHISE_SKEY,
    LEAD_TYPE_D.LEAD_TYPE_SKEY,
    LEAD_S.IS_DUPLICATE_FLAG,
    LEAD_S.OPT_IN_FLAG,
    LEAD_S.VEHICLE_STATUS,
    LEAD_S.COOKIE_ID,
    LEAD_S.TRANSACTION_TYPE_ID,
    LU_TEST_LIST.TEST_LIST_SKEY,
    LEAD_S.DEALER_ID,
    LEAD_S.ATC_SUBJECT,
    LEAD_S.KBB_SESSION_ID,
    LEAD_S.PAGE_INSTANCE,
    LEAD_S.VEHICLE_ID,
    EGEO.GEOGRAPHY_ID,
    PURCHASE_TIMEFRAME_D.PURCHASE_TIMEFRAME_SKEY,
    LEAD_S.ATC_OWNER_ID,
    LEAD_S.ATC_CAR_ID,
    LEAD_S.PROGRAM_TYPE,
    CGEO.GEOGRAPHY_ID,
    LEAD_S.BEST_CONTACT_TIME,
    LEAD_S.CONTACT_OK_FLAG,
    LEAD_S.LEAD_CREATED_DATE,
    LEAD_S.LEAD_CONTACT_CITY,
    LEAD_S.LEAD_CONTACT_STATE,
    LEAD_S.LEAD_RESPONSE_IND_CODE,
    LEAD_S.APP_SERVER_NAME,
    LEAD_S.PATH,
    COALESCE(PSD.PAID_SEARCH_SKEY, 0) PAID_SEARCH_SKEY,
    LU_DATA_SOURCE.DATA_SOURCE_ID,
    LEAD_GROUP_S.GROUP_ID
FROM  $$STAGE..LEAD_S
left outer join (select $$DATA_SOURCE_ID DATA_SOURCE_ID) LU_DATA_SOURCE on 1=1
left outer join FRANCHISE_D using (FRANCHISE_ID,DATA_SOURCE_ID)
left outer join LEAD_TYPE_D using (LEAD_TYPE_ID,DATA_SOURCE_ID)
left outer join PURCHASE_TIMEFRAME_D using (PURCHASE_TIMEFRAME_ID, DATA_SOURCE_ID)
left outer join LU_TEST_LIST using (TEST_LIST_NKEY)
left outer join GEOGRAPHY_D EGEO on ENTRY_ZIP_CODE = EGEO.ZIP_CODE
left outer join GEOGRAPHY_D CGEO on LEAD_CONTACT_ZIP_CODE = CGEO.ZIP_CODE
left outer join $$STAGE..LEAD_GROUP_S using(LEAD_ID)
left outer join PAID_SEARCH_D PSD ON LOWER(LEAD_S.PAID_SEARCH_ID) = LOWER(PSD.PAID_SEARCH_ID)
where LEAD_CREATED_DATE < CURRENT_DATE